#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Samba4 Password sync
#  sync the password from UCS to Samba4
#
# Copyright 2010-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

from univention.config_registry import ConfigRegistry
import univention.uldap
import univention.admin.uldap
import ldap
import univention.debug2 as ud
import univention.s4connector.s4.password
from ldap.controls import LDAPControl
from optparse import OptionParser
import sys, binascii

class S4:
	def __init__(self, ucrbase, binddn, bindpwd, ucr=None):
		self.ucrbase = ucrbase
		if ucr:
			self.ucr = ucr
		else:
			self.ucr = ConfigRegistry()
			self.ucr.load()

		self.init_debug()
		self.open_s4()
		self.open_ucs(binddn, bindpwd)

	def init_debug(self):
		_d=ud.function('init_debug')
		try:
			function_level=int(self.ucr.get('%s/debug/function' % self.ucrbase, 0))
		except:
			function_level = 0
		ud.init('/var/log/univention/%s-s4.log' % self.ucrbase, 1, function_level)
		debug_level=self.ucr.get('%s/debug/level' % self.ucrbase, 2)
		ud.set_level(ud.LDAP, int(debug_level))

	def open_s4( self ):
		tls_mode = 2
		if self.ucr.get('%s/s4/ldap/ssl' % self.ucrbase) == "no":
			ud.debug(ud.LDAP, ud.INFO,"__init__: LDAPS-connection to S4 switched of by UCR.")
			tls_mode = 0

		protocol = self.ucr.get('%s/s4/ldap/protocol' % self.ucrbase, 'ldap').lower()
		ldap_host_s4 = self.ucr.get('%s/s4/ldap/host' % self.ucrbase)
		ldap_port_s4 = int(self.ucr.get('%s/s4/ldap/port' % self.ucrbase))
		self.ldap_base_s4 = self.ucr.get('%s/s4/ldap/base' % self.ucrbase)
		ldap_binddn_s4 = self.ucr.get('%s/s4/ldap/binddn' % self.ucrbase)
		ldap_bindpw_s4 = None
		if self.ucr.get('%s/s4/ldap/bindpw' % self.ucrbase):
			ldap_bindpw_s4 = open(self.ucr['%s/s4/ldap/bindpw' % self.ucrbase]).read().strip('\n')
		ldap_certificate_s4 = self.ucr.get('%s/s4/ldap/certificate' % self.ucrbase)
		if protocol == 'ldapi':
			import urllib
			socket = urllib.quote(self.ucr.get('%s/s4/ldap/socket' % self.ucrbase, ''), '')
			ldap_uri_s4 = "%s://%s" % (protocol, socket)
		else:
			ldap_uri_s4 = "%s://%s:%d" % (protocol, ldap_host_s4, ldap_port_s4)

		try:
			self.lo_s4=univention.uldap.access(host=ldap_host_s4, port=ldap_port_s4, base=self.ldap_base_s4, binddn=ldap_binddn_s4, bindpw=ldap_bindpw_s4, start_tls=tls_mode, ca_certfile=ldap_certificate_s4, decode_ignorelist=['objectSid', 'objectGUID', 'repsFrom', 'replUpToDateVector', 'ipsecData', 'logonHours', 'userCertificate', 'dNSProperty', 'dnsRecord', 'member', 'unicodePwd'], uri=ldap_uri_s4)
			self.lo_s4.lo.set_option(ldap.OPT_REFERRALS,0)
		except ldap.SERVER_DOWN:
			print "Can't initialize Samba4 LDAP connection"
			raise ldap.SERVER_DOWN


	def open_ucs( self, binddn, bindpwd ):
		if not binddn:
			binddn='cn=admin,'+self.ucr['ldap/base']

		# read password from file
		if not bindpwd:
			bindpwd=open('/etc/ldap.secret').read()
			if bindpwd[-1] == '\n':
				bindpwd=bindpwd[0:-1]

		self.ucs_ldap_base = self.ucr.get('ldap/base')

		try:
			self.lo=univention.admin.uldap.access(host=self.ucr['ldap/master'], base=self.ucr['ldap/base'], binddn=binddn, bindpw=bindpwd, start_tls=2)
		except ldap.SERVER_DOWN:
			print "Can't initialize UCS LDAP connection"
			raise ldap.SERVER_DOWN


	def _object_mapping( self, key, object, connection ):
		return key

	def sync_password( self, username ):
		try:
			res = self.lo.lo.search(base=self.ucs_ldap_base, scope='sub', filter='(&(objectClass=sambaSamAccount)(uid=%s))' % username, attr=['dn'])
		except ldap.NO_SUCH_OBJECT:
			ud.debug(ud.LDAP, ud.PROCESS, "password_ucs_to_s4: The UCS user (%s) was not found." % username)
			print "password_ucs_to_s4: The UCS user (%s) was not found." % username
			return
		if not res:
			ud.debug(ud.LDAP, ud.PROCESS, "password_ucs_to_s4: The UCS user (%s) was not found." % username)
			print "\npassword_ucs_to_s4: The UCS user (%s) was not found." % username
			return
		ucs_object = {}
		ucs_object['dn'] = res[0][0]


		try:
			res = self.lo_s4.lo.search_s(self.ldap_base_s4, ldap.SCOPE_SUBTREE, '(&(objectClass=user)(!(objectClass=computer))(cn=%s))' % username,['dn'])
		except ldap.NO_SUCH_OBJECT:
			ud.debug(ud.LDAP, ud.PROCESS, "password_ucs_to_s4: The Samba4 user (%s) was not found." % username)
			print "password_ucs_to_s4: The Samba4 user (%s) was not found." % username
			return
		except ldap.SERVER_DOWN:
			print "Can't initialize Samba4 LDAP connection"
			raise ldap.SERVER_DOWN
		if not res:
			ud.debug(ud.LDAP, ud.PROCESS, "password_ucs_to_s4: The Samba4 user (%s) was not found." % username)
			print "\npassword_ucs_to_s4: The Samba4 user (%s) was not found." % username
			return

		s4_object = {}
		s4_object['dn'] = res[0][0]
		univention.s4connector.s4.password.password_sync_ucs_to_s4( self, ucs_object, s4_object )
	
def main():
	usage = "usage: univention-password_sync_ucs_to_s4 [options] username"
	parser = OptionParser(usage=usage)
	parser.add_option("--ucrbase", dest="ucrbase",
			help="", metavar="ucrbase", default="connector")
	parser.add_option("--binddn", dest="binddn",
			help="Binddn for UCS LDAP connection", default=None)
	parser.add_option("--bindpwd", dest="bindpwd",
			help="Bindpwd for UCS LDAP connection", default=None)
	(options, args) = parser.parse_args()
	if not len(args) == 1:
		parser.error("need a username")

	try:
		s4 = S4(options.ucrbase, options.binddn, options.bindpwd)
		s4.sync_password(args[0])
	except ldap.SERVER_DOWN:
		sys.exit(1)

if __name__ == '__main__':
	main()
